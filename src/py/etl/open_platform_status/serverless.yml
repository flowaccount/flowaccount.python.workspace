service: etl-dynamodb

frameworkVersion: '3'

plugins:
  - serverless-dotenv-plugin
  - serverless-package-external

custom:
  packageExternal:
    external:
      - '../../flowaccount'

package:
  patterns:
    - '!node_modules/**'
    - '!package-lock.json'
    - '!__pycache__/**'
    - '!.pytest_cache/**'
    - '!BUILD'
    - '!**/BUILD'

provider:
  name: aws
  runtime: ${env:RUNTIME, python3.8}
  stage: ${env:STAGE, dev}
  region: ${env:AWS_REGION, ap-southeast-1}
  layers:
    - arn:aws:lambda:ap-southeast-1:${aws:accountId}:layer:aws-data-wrangler-layer-py3-8:1

functions:
  export-table:
    handler: handlers/export_table.handle
    description: Export DynamoDB to S3
    environment:
      DYNAMODB_ARN: arn:aws:dynamodb:${aws:region}:${aws:accountId}
      RAW_BUCKET: ${env:RAW_BUCKET}
      S3_PREFIX: ${RAW_DYNAMODB_PREFIX}

  parse-export-manifest:
    handler: handlers/parse_export_manifest.handle
    description: Parse DynamoDB export manifest

  extract-open-platform:
    handler: handlers/extract_open_platform.handle

  clean-open-platform:
    handler: handlers/clean_open_platform.handle
    role: cleanOpenPlatformRole
    description: Clean new export manifest summary, manifest files and records
    environment:
      CLEAN_BUCKET: ${env:CLEAN_BUCKET}
      CLEAN_CATALOG: ${env:CLEAN_CATALOG}
    events:
      - s3:
          bucket: ${env:RAW_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: dynamodb/tables/
            - suffix: .json
          existing: true

  load-company:
    handler: handlers/load_company.handle
    role: loadCompanyRole
    description: Load new companies into RedShift
    environment:
      CLEAN_BUCKET: ${env:CLEAN_BUCKET}
      TABLE_KEY: ${env:CLEAN_DYNAMODB_PREFIX}/tables/flowaccount-open-platform-company-user-v2
      REDSHIFT_SECRET_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:${env:REDSHIFT_SECRET_ID}
      REDSHIFT_SCHEMA: ${env:REDSHIFT_SCHEMA}
    vpc:
      securityGroupIds:
        - sg-04d1b3a38f1948e78
      subnetIds:
        - subnet-0d0242b967352e6a4
        - subnet-0dd7d193b2d2df967
  
  load-open-platform:
    handler: handlers/load_open_platform.handle
    role: loadOpenPlatformRole
    description: Load open platform status into RedShift
    environment:
      CLEAN_BUCKET: ${env:CLEAN_BUCKET}
      TABLE_KEY: ${env:CLEAN_DYNAMODB_PREFIX}/tables/flowaccount-open-platform-company-user-v2
      REDSHIFT_SECRET_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:pipat-etl-redshift-lxoxVP
      REDSHIFT_SCHEMA: ${env:REDSHIFT_SCHEMA}
    maximumEventAge: 300
    vpc:
      securityGroupIds:
        - sg-04d1b3a38f1948e78
      subnetIds:
        - subnet-0d0242b967352e6a4
        - subnet-0dd7d193b2d2df967
  
  load-hubspot:
    handler: handlers/load_hubspot:handle
    description: Load latest open platform status to HubSpot
    environment:
      HUBSPOT_ACCESS_TOKEN_ARN: ${env:HUBSPOT_ACCESS_TOKEN_ARN}
      REDSHIFT_SECRET_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:pipat-etl-redshift-lxoxVP
      REDSHIFT_DB: ${env:REDSHIFT_DB}
      REDSHIFT_PLATFORM_SCHEMA: ${env:REDSHIFT_SCHEMA}
      REDSHIFT_HUBSPOT_SCHEMA: ${env:REDSHIFT_HUBSPOT_SCHEMA}

resources:
  Resources:
    cleanOpenPlatformRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EtlDynamoDBCleanOpenPlatformRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EtlDynamoDBCleanOpenPlatformtPolicy
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                # Allow create logging group
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/etl-dynamodb-dev*:*"
                # Allow logging
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/etl-dynamodb-dev*:*:*"
                # Allow reading manifest from raw bucket
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${env:RAW_BUCKET}/*
                # Allow writing manifest to clean bucket
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${env:CLEAN_BUCKET}/*
                # Allow all Glue actions
                - Effect: Allow
                  Action:
                    - glue:*
                  Resource:
                    - "*"
    loadCompanyRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EtlDynamoDBLoadCompanyRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EtlDynamoDBLoadCompanyPolicy
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                # Allow create logging group
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/etl-dynamodb-dev*:*"
                # Allow logging
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/etl-dynamodb-dev*:*:*"
                # Allow reading from clean bucket
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${env:CLEAN_BUCKET}
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${env:CLEAN_BUCKET}/*
                # Allow all Glue actions
                - Effect: Allow
                  Action:
                    - glue:*
                  Resource:
                    - "*"
                # Allow R/W on RedShift
                - Effect: Allow
                  Action:
                    - redshift-data:BatchExecuteStatement
                    - redshift-data:ExecuteStatement
                    - redshift-data:CancelStatement
                    - redshift-data:ListStatements
                    - redshift-data:GetStatementResult
                    - redshift-data:DescribeStatement
                    - redshift-data:ListDatabases
                    - redshift-data:ListSchemas
                    - redshift-data:ListTables
                    - redshift-data:DescribeTable
                  Resource:
                    - arn:aws:redshift:${aws:region}:${aws:accountId}:cluster:etl-redshift-fadev-redshift-cluster
                # Allow to retrieve secret
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource:
                    - arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:*
        ManagedPolicyArns:
          - arn:aws:iam::${aws:accountId}:policy/vpc-permission-lambda
    loadOpenPlatformRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EtlDynamoDBLoadOpenPlatformRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EtlDynamoDBLoadOpenPlatformPolicy
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                # Allow create logging group
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/etl-dynamodb-dev*:*"
                # Allow logging
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/etl-dynamodb-dev*:*:*"
                # Allow reading from clean bucket
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${env:CLEAN_BUCKET}
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${env:CLEAN_BUCKET}/*
                # Allow all Glue actions
                - Effect: Allow
                  Action:
                    - glue:*
                  Resource:
                    - "*"
                # Allow R/W on RedShift
                - Effect: Allow
                  Action:
                    - redshift-data:BatchExecuteStatement
                    - redshift-data:ExecuteStatement
                    - redshift-data:CancelStatement
                    - redshift-data:ListStatements
                    - redshift-data:GetStatementResult
                    - redshift-data:DescribeStatement
                    - redshift-data:ListDatabases
                    - redshift-data:ListSchemas
                    - redshift-data:ListTables
                    - redshift-data:DescribeTable
                  Resource:
                    - arn:aws:redshift:${aws:region}:${aws:accountId}:cluster:etl-redshift-fadev-redshift-cluster
                # Allow to retrieve secret
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource:
                    - arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:*
        ManagedPolicyArns:
          - arn:aws:iam::${aws:accountId}:policy/vpc-permission-lambda
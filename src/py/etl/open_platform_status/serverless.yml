service: etl-dynamodb

frameworkVersion: '3'

useDotenv: true

plugins:
  - serverless-package-external

custom:
  packageExternal:
    external:
      - '../../flowaccount'

package:
  patterns:
    - '!node_modules/**'
    - '!package-lock.json'
    - '!__pycache__/**'
    - '!.pytest_cache/**'
    - '!BUILD'
    - '!**/BUILD'
    - '!config/**'

provider:
  name: aws
  runtime: ${env:RUNTIME, "python3.8"}
  stage: ${opt:stage, "staging"}
  region: ${env:AWS_REGION, "ap-southeast-1"}
  layers:
    - ${file(./config/${opt:stage}/layers.yml):AwsWranglerLayer}

functions:
  export-table:
    handler: handlers/export_table.handle
    description: Export DynamoDB to S3
    environment:
      DYNAMODB_ARN: arn:aws:dynamodb:${aws:region}:${aws:accountId}
      RAW_BUCKET: ${file(./config/${opt:stage}/buckets.yml):RawBucket}
      S3_PREFIX: ${env:RAW_DYNAMODB_PREFIX}

  parse-export-manifest:
    handler: handlers/parse_export_manifest.handle
    description: Parse DynamoDB export manifest

  extract-open-platform:
    handler: handlers/extract_open_platform.handle

  clean-open-platform:
    handler: handlers/clean_open_platform.handle
    role: cleanOpenPlatformRole
    description: Clean new export manifest summary, manifest files and records
    environment:
      CLEAN_BUCKET: ${file(./config/${opt:stage}/buckets.yml):CleanBucket}
      CLEAN_CATALOG: ${env:CLEAN_CATALOG}
    events:
      - s3:
          bucket: ${file(./config/${opt:stage}/buckets.yml):RawBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: dynamodb/tables/
            - suffix: .json
          existing: true

  load-company:
    handler: handlers/load_company.handle
    role: loadCompanyRole
    description: Load new companies into RedShift
    environment:
      CLEAN_BUCKET: ${file(./config/${opt:stage}/buckets.yml):CleanBucket}
      TABLE_KEY: ${env:CLEAN_DYNAMODB_PREFIX}/tables/flowaccount-open-platform-company-user-v2
      REDSHIFT_SECRET_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:${env:REDSHIFT_SECRET_ID}
      REDSHIFT_DB: ${env:REDSHIFT_DB}
      REDSHIFT_SCHEMA: ${env:REDSHIFT_SCHEMA}
    vpc: ${file(./config/${opt:stage}/vpc.yml):RedShiftVpc}
  
  load-open-platform:
    handler: handlers/load_open_platform.handle
    role: loadOpenPlatformRole
    description: Load open platform status into RedShift
    environment:
      CLEAN_BUCKET: ${file(./config/${opt:stage}/buckets.yml):CleanBucket}
      TABLE_KEY: ${env:CLEAN_DYNAMODB_PREFIX}/tables/flowaccount-open-platform-company-user-v2
      REDSHIFT_SECRET_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:pipat-etl-redshift-lxoxVP
      REDSHIFT_DB: ${env:REDSHIFT_DB}
      REDSHIFT_SCHEMA: ${env:REDSHIFT_SCHEMA}
    maximumEventAge: 300
    vpc: ${file(./config/${opt:stage}/vpc.yml):RedShiftVpc}
  
  load-hubspot:
    handler: handlers/load_hubspot.handle
    role: loadHubSpotRole
    description: Load latest open platform status to HubSpot
    environment:
      HUBSPOT_ACCESS_TOKEN_ARN: ${env:HUBSPOT_ACCESS_TOKEN_ARN}
      REDSHIFT_SECRET_ARN: arn:aws:secretsmanager:${aws:region}:${aws:accountId}:secret:pipat-etl-redshift-lxoxVP
      REDSHIFT_DB: ${env:REDSHIFT_DB}
      REDSHIFT_PLATFORM_SCHEMA: ${env:REDSHIFT_SCHEMA}
      REDSHIFT_HUBSPOT_SCHEMA: ${env:REDSHIFT_HUBSPOT_SCHEMA}
    maximumEventAge: 300
    vpc: ${file(./config/${opt:stage}/vpc.yml):RedShiftVpc}
    layers:
      - ${file(./config/${opt:stage}/layers.yml):AwsWranglerLayer}
      - ${file(./config/${opt:stage}/layers.yml):HubSpotLayer}

resources:
  Resources:
    cleanOpenPlatformRole: ${file(./config/${opt:stage}/roles.yml):CleanOpenPlatformRole}
    loadCompanyRole: ${file(./config/${opt:stage}/roles.yml):LoadCompanyRole}
    loadOpenPlatformRole: ${file(./config/${opt:stage}/roles.yml):LoadOpenPlatformRole}
    loadHubSpotRole: ${file(./config/${opt:stage}/roles.yml):LoadHubSpotRole}
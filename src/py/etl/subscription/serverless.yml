service: etl-subscription

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, "staging"}
  region: ap-southeast-1
  layers:
    - ${file(./layers.${opt:stage}.yml):AwsWranglerLayer}

package:
  patterns:
    - '!node_modules/**'
    - '!package-lock.json'
    - '!__pycache__/**'
    - '!.pytest_cache/**'
    - '!BUILD'
    - '!**/BUILD'

functions:
  extract-coupon:
    handler: handlers/extract_coupon.handle
    description: Extract coupon table into S3 raw bucket
    role: extractCouponRole
    environment:
      MYSQL_ARN: "arn:aws:rds:${aws:region}:${aws:accountId}:cluster:${env:CLUSTER_NAME}"
      MYSQL_SECRET_ARN: ${env:CLUSTER_SECRET_ARN}
      DB_NAME: ${env:DB_NAME}
      DB_HOSTNAME: ${env:DB_HOSTNAME}
      TABLE_NAME: Coupon
      RAW_BUCKET: ${env:RAW_BUCKET}
      COUPON_PREFIX: streaming/${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon
    maximumEventAge: 300
    maximumRetryAttempts: 0
  
  clean-coupon:
    handler: handlers/clean_coupon.handle
    description: Clean extracted coupon file
    role: cleanCouponRole
    environment:
      CLEAN_BUCKET: ${env:CLEAN_BUCKET}
      COUPON_PREFIX: streaming/${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon
    maximumEventAge: 300
    maximumRetryAttempts: 0
  
  consolidate-clean-coupon:
    handler: handlers/consolidate_clean_coupon.handle
    description: Consolidate cleaned file with clean table
    role: consolidateCleanCouponRole
    environment:
      CLEAN_BUCKET: ${env:CLEAN_BUCKET}
      CLEAN_CATALOG: ${env:CLEAN_CATALOG}
      CLEAN_TABLE: ${env:CLUSTER_NAME}-${env:DB_NAME}-Coupon
      CLEAN_TABLE_PREFIX: ${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon
    maximumEventAge: 300
    maximumRetryAttempts: 0

  load-coupon-to-redshift:
    handler: handlers/load_coupon_to_redshift.handle
    description: Load coupon from clean table to RedShift
    role: loadCouponToRedShiftRole
    environment:
      CLEAN_TABLE: ${CLEAN_TABLE}
      REDSHIFT_SECRET_ARN: ${env:REDSHIFT_SECRET_ARN}
      SPECTRUM_SCHEMA: spectrum
      DIM_SCHEMA: dim
      DIM_TABLE: dim_coupon
    maximumEventAge: 300
    maximumRetryAttempts: 0
    # TODO: Attach RedShift VPC


resources:
  Resources:
    extractCouponRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EtlSubscriptionExtractCouponRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EtlSubscriptionExtractCouponPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Allow create logging group
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*"
                # Allow logging
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*:*"
                # Allow R/W raw bucket
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource:
                    - "arn:aws:s3:::${env:RAW_BUCKET}/streaming/${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon/*"
                # Allow querying database
                - Effect: Allow
                  Action:
                    - "rds-data:*"
                  Resource:
                    - "arn:aws:rds:${aws:region}:${aws:accountId}:cluster:${env:CLUSTER_NAME}"
                # Allow to retrieve secret
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource:
                    - ${env:CLUSTER_SECRET_ARN}
    cleanCouponRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EtlSubscriptionCleanCouponRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EtlSubscriptionCleanCouponPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Allow create logging group
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*"
                # Allow logging
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*:*"
                # Allow reading raw bucket
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - "arn:aws:s3:::${env:RAW_BUCKET}"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - "arn:aws:s3:::${env:RAW_BUCKET}/streaming/${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon/*"
                # Allow writing clean bucket
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - "arn:aws:s3:::${env:CLEAN_BUCKET}/streaming/${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon/*"
    consolidateCleanCouponRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EtlSubscriptionConsolidateCleanCouponRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EtlSubscriptionConsolidateCleanCouponPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Allow create logging group
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*"
                # Allow logging
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*:*"
                # Allow reading clean bucket
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - "arn:aws:s3:::${env:CLEAN_BUCKET}"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - "arn:aws:s3:::${env:CLEAN_BUCKET}/streaming/${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon/*"
                # Allow writing clean bucket
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - "arn:aws:s3:::${env:CLEAN_BUCKET}/${env:CLUSTER_NAME}/${env:DB_NAME}/Coupon/*"
                # Allow R/W Glue catalog
                - Effect: Allow
                  Action:
                    - glue:*
                  Resource: "*"
    loadCouponToRedShiftRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EtlSubscriptionLoadCouponToRedShiftRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: EtlSubscriptionLoadCouponToRedShiftPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # Allow create logging group
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*"
                # Allow logging
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                  Resource:
                    - "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${opt:stage}*:*:*"
                # TODO: Allow executing query on RedShift
